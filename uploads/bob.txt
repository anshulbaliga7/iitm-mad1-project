This is an interesting research direction. Let me help design a novel consensus algorithm specifically tailored for land registry that builds on Proof of Authority (PoA) while addressing the unique challenges of land transactions. Let's call it "Hierarchical Multi-Authority Consensus" (HMAC).
Key Novel Components:

Hierarchical Authority Structure:

CopyLevel 1: Government Land Authorities (Super Validators)
Level 2: Banks & Financial Institutions (Transaction Validators)
Level 3: Legal Notaries (Document Validators)
Level 4: Property Surveyors (Physical Validators)

Dynamic Trust Scoring:

CopyTrustScore = w1(HistoricalAccuracy) + w2(TransactionVolume) + 
             w3(ValidationSpeed) + w4(CrossValidationRate) +
             w5(GeographicalRelevance)

Where:
- w1 to w5 are dynamic weights
- GeographicalRelevance considers validator's expertise in specific regions

Cross-Level Validation Requirements:

CopyValidationThreshold = BaseThreshold + 
                     (TransactionValue/MaxValue × ComplexityMultiplier) +
                     (RiskFactor × SecurityMultiplier)

Required Validators = ceil(log2(TransactionValue) × ValidationThreshold)

Novel Multi-Phase Consensus Algorithm:

pseudocodeCopyPhase 1: Authority Selection
function selectValidators(transaction):
    requiredValidators = calculateRequiredValidators(transaction)
    validators = []
    
    for level in AUTHORITY_LEVELS:
        levelValidators = selectTopByTrustScore(level, 
                                              geography=transaction.location,
                                              specialization=transaction.type)
        validators.append(filterConflictOfInterest(levelValidators))
    
    return validators

Phase 2: Parallel Validation
function parallelValidate(transaction, validators):
    documentValidation = asyncValidate(validators.level3, transaction.documents)
    physicalValidation = asyncValidate(validators.level4, transaction.property)
    financialValidation = asyncValidate(validators.level2, transaction.payment)
    
    return aggregateResults(documentValidation, 
                          physicalValidation, 
                          financialValidation)

Phase 3: Progressive Consensus
function achieveConsensus(transaction, validationResults):
    // Novel weighted voting mechanism
    weight = calculateDynamicWeight(validator.level, 
                                  validator.trustScore,
                                  transaction.complexity)
    
    consensusThreshold = baseThreshold + 
                        (transaction.value/maxValue) * complexityMultiplier
    
    if weightedVotes >= consensusThreshold:
        return CONSENSUS_ACHIEVED
    else:
        return CONSENSUS_FAILED

Phase 4: Smart Contract Execution
function executeTransaction(transaction, consensusResult):
    if consensusResult == CONSENSUS_ACHIEVED:
        updateLandRegistry(transaction)
        updateValidatorScores(transaction.validators)
        emitBlockchainUpdate(transaction)
        return SUCCESS
    return FAILURE

Unique Features:

a) Geographical Validation Zones:
pythonCopydef calculateGeographicalWeight(validator, transaction):
    distance = getDistance(validator.jurisdiction, transaction.location)
    expertise = validator.expertiseInRegion[transaction.location]
    return (1/distance) * expertise
b) Risk-Based Validation Scaling:
pythonCopydef calculateRiskLevel(transaction):
    baseRisk = transaction.value / AVERAGE_TRANSACTION_VALUE
    historicalRisk = getHistoricalRiskScore(transaction.location)
    partyRisk = assessPartyRiskScore(transaction.parties)
    
    return (baseRisk * 0.4) + (historicalRisk * 0.3) + (partyRisk * 0.3)
c) Authority Reputation System:
pythonCopydef updateAuthorityReputation(authority, transaction):
    accuracy = validateTransactionOutcome(transaction)
    speed = measureValidationTime(transaction)
    complexity = assessTransactionComplexity(transaction)
    
    newScore = (accuracy * 0.5) + (speed * 0.3) + (complexity * 0.2)
    authority.reputationScore = 
        (authority.reputationScore * 0.7) + (newScore * 0.3)
Novel Aspects for Paper:

First implementation of hierarchical authority structure in PoA for land registry
Dynamic trust scoring incorporating geographical expertise
Multi-phase parallel validation with cross-level verification
Risk-based scaling of validation requirements
Integration with Hyperledger Fabric and CouchDB for practical implementation

You could focus your paper on how this algorithm:

Reduces validation time while maintaining security
Handles different types of land transactions differently
Adapts to regional variations in land laws
Maintains decentralization while ensuring regulatory compliance
Scales validation requirements based on transaction complexity